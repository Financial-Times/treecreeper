version: 2.1

orbs:
  ft-snyk-orb: financial-times/ft-snyk-orb@0

references:
  default_container_config: &default_container_config
    docker:
      # need -browsers as it bundles selenium, which bundles java, which we need
      - image: circleci/node:12.9.1-browsers
      - image: cypress/base:12.0.0
        environment:
          ## this enables colors in the output
          TERM: xterm

    environment:
      NEO4J_VERSION: '4.1.5'

  workspace_root: &workspace_root ~/

  cache_key: &cache_key cache-v5-{{ .Branch }}-{{ checksum "./package.json" }}

  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root

  restore_node_modules: &restore_node_modules
    restore_cache:
      keys:
        - *cache_key

  cache_node_modules: &cache_node_modules
    save_cache:
      key: *cache_key
      paths:
        - ./node_modules/

  only_version_tags: &only_version_tags
    tags:
      only: /^v[0-9]+\.[0-9]+\.[0-9]+(-(alpha|beta)\.\d+)?$/

jobs:
  install:
    <<: *default_container_config
    steps:
      - checkout

      - *restore_node_modules

      - run:
          name: Install dependencies
          command: make install
      - run:
          name: Install monorepo node modules
          command: npm install

      - run:
          name: Get test env vars
          command: make env

      - *cache_node_modules

      - persist_to_workspace:
          root: *workspace_root
          paths:
            - .
  cypress-build:
    <<: *default_container_config

    steps:
      - *attach_workspace
      - restore_cache:
          keys:
            - *cache_key
      - run:
          name: Install Dependencies
          command: npm ci
      # run verify and then save cache.
      # this ensures that the Cypress verified status is cached too
      - run: make cypress-verify
      # save new cache folder if needed
      - save_cache:
          key: *cache_key
          paths:
            - ~/.npm
            - ~/.cache
      # all other test jobs will run AFTER this build job finishes
      # to avoid reinstalling dependencies, we persist the Cypress binary to workspace
      - persist_to_workspace:
          root: ~/
          paths:
            - .cache/Cypress
  test:
    <<: *default_container_config
    steps:
      - *attach_workspace

      - run:
          name: Prepare neo4j database
          command: make run-test-db
      - run:
          name: Run tests
          command: make init-db test
          environment:
            JEST_JUNIT_OUTPUT: 'junit/test-results.xml'
      - store_test_results:
          path: junit

      - store_artifacts:
          path: junit

  cypress-page:
    <<: *default_container_config

    steps:
      - *attach_workspace

      - run: sudo sh -c 'echo "127.0.0.1 local.in.ft.com" >> /etc/hosts'
      - run:
          name: Prepare neo4j database
          command: make run-test-db
      - run:
          name: Run End-to-End Pages Test
          command: make cypress-page
      - store_artifacts:
          path: cypress/videos
      - store_artifacts:
          path: cypress/screenshots

  cypress-primitives:
    <<: *default_container_config

    steps:
      - *attach_workspace

      - run: sudo sh -c 'echo "127.0.0.1 local.in.ft.com" >> /etc/hosts'
      - run:
          name: Prepare neo4j database
          command: make run-test-db
      - run:
          name: Run End-to-End Primitive types Test
          command: make cypress-primitives
      - store_artifacts:
          path: cypress/videos
      - store_artifacts:
          path: cypress/screenshots

  verify:
    <<: *default_container_config
    steps:
      - *attach_workspace
      - run:
          name: Verify
          command: make verify -j 3

  publish:
    <<: *default_container_config
    steps:
      - *attach_workspace
      - run:
          name: Setup npm credetials
          command: echo "//registry.npmjs.org/:_authToken=$NPM_AUTH_TOKEN" > ~/.npmrc
      - run:
          name: Publish to npm registry
          command: make monorepo-publish

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - install:
          context: rel-eng-creds
          filters: *only_version_tags
      - cypress-build:
          requires:
            - install
          filters: *only_version_tags
      - test:
          requires:
            - install
          filters: *only_version_tags
      - verify:
          context: rel-eng-creds
          requires:
            - install
          filters: *only_version_tags
      - cypress-page:
          requires:
            - cypress-build
          filters: *only_version_tags
      - cypress-primitives:
          requires:
            - cypress-build
          filters: *only_version_tags
      # Scan package.json for vulnerable dependencies while developing
      - ft-snyk-orb/scan-js-packages:
          context: rel-eng-creds
          requires:
            - install
          filters: *only_version_tags
          workspace-path: *workspace_root
      - publish:
          context: rel-eng-creds
          requires:
            - install
            - test
            - verify
            - cypress-page
            - cypress-primitives
            - ft-snyk-orb/scan-js-packages
          filters:
            <<: *only_version_tags
            branches:
              ignore: /.*/
      # Scan and monitor vulnerabilities once in production
      - ft-snyk-orb/scan-and-monitor-js-packages:
          name: snyk-scan-and-monitor
          context: rel-eng-creds
          requires:
            - publish
          workspace-path: *workspace_root
          filters:
            <<: *only_version_tags
            branches:
              ignore: /.*/
