directive @deprecated(reason: String = "No longer supported") on FIELD_DEFINITION | ENUM_VALUE | ARGUMENT_DEFINITION
"""The `Boolean` scalar type represents `true` or `false`."""
scalar Boolean
"""A cost centre which groups are costed to"""
type CostCentre {
"""Unique code/id for this item"""
code: String
"""The name of the cost centre"""
name: String
"""The groups which are costed to the cost centre"""
hasGroups(first: Int, offset: Int): [Group] @relation(name: "PAYS_FOR")
"""
The groups which are costed to the cost centre
*NOTE: This gives access to properties on the relationships between records
as well as on the records themselves. Use 'hasGroups' instead if you do not need this*
"""
hasGroups_rel(first: Int, offset: Int): [CostcentrePaysForGroup]
"""The recursive groups which are costed to the cost centre"""
hasNestedGroups(first: Int, offset: Int): [Group] @cypher(statement: "MATCH (this)-[:PAYS_FOR*1..20]->(related:Group) RETURN DISTINCT related")
"""Group that embezzles description"""
embezzledBy: Group @relation(name: "EMBEZZLES")
"""
Group that embezzles description
*NOTE: This gives access to properties on the relationships between records
as well as on the records themselves. Use 'embezzledBy' instead if you do not need this*
"""
embezzledBy_rel: CostcentreEmbezzlesGroup
"""The client that was used to make the creation"""
_createdByClient: String
"""The user that made the creation"""
_createdByUser: String
"""The time and date this record was created"""
_createdTimestamp: DateTime
"""The client that was used to make the update"""
_updatedByClient: String
"""The last user to make an update"""
_updatedByUser: String
"""The time and date this record was last updated"""
_updatedTimestamp: DateTime
"""
Autopopulated fields that are uneditable. This is an experimental feature that can be ignored.
"""
_lockedFields: String
}
"""Internal use only"""
type CostcentreEmbezzlesGroup @relation(name: "EMBEZZLES") {
from: CostCentre
to: Group
"""Jusrisdiction description"""
jurisdiction: String
"""The client that was used to make the creation"""
_createdByClient: String
"""The user that made the creation"""
_createdByUser: String
"""The time and date this record was created"""
_createdTimestamp: DateTime
"""The client that was used to make the update"""
_updatedByClient: String
"""The last user to make an update"""
_updatedByUser: String
"""The time and date this record was last updated"""
_updatedTimestamp: DateTime
}
"""Internal use only"""
type CostcentrePaysForGroup @relation(name: "PAYS_FOR") {
from: CostCentre
to: Group
"""The client that was used to make the creation"""
_createdByClient: String
"""The user that made the creation"""
_createdByUser: String
"""The time and date this record was created"""
_createdTimestamp: DateTime
"""The client that was used to make the update"""
_updatedByClient: String
"""The last user to make an update"""
_updatedByUser: String
"""The time and date this record was last updated"""
_updatedTimestamp: DateTime
}
scalar DateTime
"""An overarching group which contains teams and is costed separately"""
type Group {
"""Unique code/id for this item"""
code: String
"""The name of the group"""
name: String
"""Whether or not the group is still in existence"""
isActive: Boolean
"""How good it is"""
level: TrafficLight
"""The Cost Centre associated with the group"""
hasBudget: CostCentre @relation(name: "PAYS_FOR")
"""
The Cost Centre associated with the group
*NOTE: This gives access to properties on the relationships between records
as well as on the records themselves. Use 'hasBudget' instead if you do not need this*
"""
hasBudget_rel: CostcentrePaysForGroup
"""CostCentre to embezzle description"""
embezzles: CostCentre @relation(name: "EMBEZZLES")
"""
CostCentre to embezzle description
*NOTE: This gives access to properties on the relationships between records
as well as on the records themselves. Use 'embezzles' instead if you do not need this*
"""
embezzles_rel: CostcentreEmbezzlesGroup
"""The client that was used to make the creation"""
_createdByClient: String
"""The user that made the creation"""
_createdByUser: String
"""The time and date this record was created"""
_createdTimestamp: DateTime
"""The client that was used to make the update"""
_updatedByClient: String
"""The last user to make an update"""
_updatedByUser: String
"""The time and date this record was last updated"""
_updatedTimestamp: DateTime
"""
Autopopulated fields that are uneditable. This is an experimental feature that can be ignored.
"""
_lockedFields: String
}
"""
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
"""
scalar Int
type Query {
CostCentre(code: String, name: String): CostCentre
CostCentres(first: Int, offset: Int, code: String, name: String, _createdByClient: String, _createdByUser: String, _createdTimestamp: DateTime, _updatedByClient: String, _updatedByUser: String, _updatedTimestamp: DateTime, _lockedFields: String): [CostCentre]
Group(code: String, name: String): Group
Groups(first: Int, offset: Int, code: String, name: String, isActive: Boolean, level: TrafficLight, _createdByClient: String, _createdByUser: String, _createdTimestamp: DateTime, _updatedByClient: String, _updatedByUser: String, _updatedTimestamp: DateTime, _lockedFields: String): [Group]
}
"""
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
"""
scalar String
"""Quality rating based on Red, Amber and Green."""
enum TrafficLight {
Red
Amber
Green
}
